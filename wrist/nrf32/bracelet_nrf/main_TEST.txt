#include <stdint.h>
#include <string.h>
#include "nordic_common.h"
#include "nrf.h"
#include "ble_hci.h"
#include "ble_advdata.h"
#include "ble_advertising.h"
#include "ble_conn_params.h"
#include "nrf_sdh.h"
#include "nrf_sdh_soc.h"
#include "nrf_sdh_ble.h"
#include "nrf_ble_gatt.h"
#include "nrf_ble_qwr.h"
#include "app_timer.h"
#include "ble_nus.h"
#include "app_util_platform.h"
#include "nrf_pwr_mgmt.h"
#include "nrf_drv_saadc.h"
#include "nrf_delay.h"
#include "nrf_gpio.h"
#include "nrf_fstorage.h"
#include "nrf_fstorage_sd.h"
#include "nrf_drv_spi.h"
#include "mpu6500_spi.h"

#define MPU_GET_ACC
//#define MPU_GET_GYR
//#define ANALOG_IN_GET
//#define FSTORAGE_TEST
//#define SAVING_TEST

/* DIGITAL OUTPUTS */
#define LED_1                          7 // red
#define LED_2                          8 // green
#define OUT_MCP                        23
#define V_S_S                          24
#define AD5206_CS                      26

/* DIGITAL INPUTS */
#define MC_DIN  22
#define BTN     6
#define CHRG    25

#define APP_BLE_CONN_CFG_TAG            1                                           /**< A tag identifying the SoftDevice BLE configuration. */

#define DEVICE_NAME                     "LARS_Bracelet"                             /**< Name of device. Will be included in the advertising data. */
#define NUS_SERVICE_UUID_TYPE           BLE_UUID_TYPE_VENDOR_BEGIN                  /**< UUID type for the Nordic UART Service (vendor specific). */

#define APP_BLE_OBSERVER_PRIO           3                                           /**< Application's BLE observer priority. You shouldn't need to modify this value. */

#define APP_ADV_INTERVAL                64                                          /**< The advertising interval (in units of 0.625 ms. This value corresponds to 40 ms). */

#define APP_ADV_DURATION                18000                                       /**< The advertising duration (180 seconds) in units of 10 milliseconds. */

#define MIN_CONN_INTERVAL               MSEC_TO_UNITS(20, UNIT_1_25_MS)             /**< Minimum acceptable connection interval (20 ms), Connection interval uses 1.25 ms units. */
#define MAX_CONN_INTERVAL               MSEC_TO_UNITS(75, UNIT_1_25_MS)             /**< Maximum acceptable connection interval (75 ms), Connection interval uses 1.25 ms units. */
#define SLAVE_LATENCY                   0                                           /**< Slave latency. */
#define CONN_SUP_TIMEOUT                MSEC_TO_UNITS(4000, UNIT_10_MS)             /**< Connection supervisory timeout (4 seconds), Supervision Timeout uses 10 ms units. */
#define FIRST_CONN_PARAMS_UPDATE_DELAY  APP_TIMER_TICKS(5000)                       /**< Time from initiating event (connect or start of notification) to first time sd_ble_gap_conn_param_update is called (5 seconds). */
#define NEXT_CONN_PARAMS_UPDATE_DELAY   APP_TIMER_TICKS(30000)                      /**< Time between each call to sd_ble_gap_conn_param_update after the first call (30 seconds). */
#define MAX_CONN_PARAMS_UPDATE_COUNT    3                                           /**< Number of attempts before giving up the connection parameter negotiation. */

#define DEAD_BEEF                       0xDEADBEEF                                  /**< Value used as error code on stack dump, can be used to identify stack location on stack unwind. */


typedef enum {
    BRACELET_MODE,
    RESISTANCE_VALUES,
    CALIBR_SENSORS_STAGE_1,
    CALIBR_SENSORS_STAGE_2,
    CHOSEN_SIGNALS
} save_cases_e;


static uint32_t nrf5_flash_end_addr_get(void);
static void fstorage_evt_handler(nrf_fstorage_evt_t * p_evt);
static void wait_for_flash_ready(nrf_fstorage_t const * p_fstorage);
void saadc_callback_handler(nrf_drv_saadc_evt_t const *p_event);
static void saadc_init(void);
void assert_nrf_callback(uint16_t line_num, const uint8_t * p_file_name);
static void timers_init(void);
static void gap_params_init(void);
static void nrf_qwr_error_handler(uint32_t nrf_error);
static void nus_data_handler(ble_nus_evt_t * p_evt);
static void services_init(void);
static void on_conn_params_evt(ble_conn_params_evt_t * p_evt);
static void conn_params_error_handler(uint32_t nrf_error);
static void conn_params_init(void);
static void sleep_mode_enter(void);
static void on_adv_evt(ble_adv_evt_t ble_adv_evt);
static void ble_evt_handler(ble_evt_t const * p_ble_evt, void * p_context);
static void ble_stack_init(void);
void gatt_evt_handler(nrf_ble_gatt_t * p_gatt, nrf_ble_gatt_evt_t const * p_evt);
static void gatt_init(void);
static void advertising_init(void);
static void power_management_init(void);
static void idle_state_handle(void);
static void advertising_start(void);
static void gyroscope_accelerometer_init(void);
static void digital_pins_init(void);
static void ad5206_write(uint8_t address, uint8_t value);
static void save_bracelet_values(uint8_t save_case);
static void read_bracelet_values(void);


NRF_FSTORAGE_DEF(nrf_fstorage_t fstorage) = {
    /* Set a handler for fstorage events. */
    .evt_handler = fstorage_evt_handler,

    /* These below are the boundaries of the flash space assigned to this instance of fstorage.
     * You must set these manually, even at runtime, before nrf_fstorage_init() is called.
     * The function nrf5_flash_end_addr_get() can be used to retrieve the last address on the
     * last page of flash available to write data. */
    .start_addr = 0x3e000,
    .end_addr   = 0x3ffff,
};

BLE_NUS_DEF(m_nus, NRF_SDH_BLE_TOTAL_LINK_COUNT);                                   /**< BLE NUS service instance. */
NRF_BLE_GATT_DEF(m_gatt);                                                           /**< GATT module instance. */
NRF_BLE_QWR_DEF(m_qwr);                                                             /**< Context for the Queued Write module.*/
BLE_ADVERTISING_DEF(m_advertising);                                                 /**< Advertising module instance. */

static uint16_t   m_conn_handle          = BLE_CONN_HANDLE_INVALID;                 /**< Handle of the current connection. */
static uint16_t   m_ble_nus_max_data_len = BLE_GATT_ATT_MTU_DEFAULT - 3;            /**< Maximum length of data (in bytes) that can be transmitted to the peer by the Nordic UART service module. */
static ble_uuid_t m_adv_uuids[]          = {                                        /**< Universally unique service identifier. */
    {BLE_UUID_NUS_SERVICE, NUS_SERVICE_UUID_TYPE}
};


/* bracelet main values */
uint8_t bracelet_mode = 0;
uint8_t resistance[] = {0, 0, 0, 0, 0, 0};
uint16_t signals_stage_1[] = {0, 0, 0, 0, 0, 0};
uint16_t signals_stage_2[] = {0, 0, 0, 0, 0, 0};
uint8_t chosen_signals = 69;

extern const nrf_drv_spi_t spi_inst;


int main(void) {
    ret_code_t rc;
    nrf_saadc_value_t signals[4];
    uint8_t ble_output_array[BLE_NUS_MAX_DATA_LEN]; // max 246 bytes

    digital_pins_init();
    /* fstorage stuff */
    nrf_fstorage_api_t * p_fs_api;
    p_fs_api = &nrf_fstorage_sd;
    rc = nrf_fstorage_init(&fstorage, p_fs_api, NULL);
    APP_ERROR_CHECK(rc);
    //(void) nrf5_flash_end_addr_get();

    // Initializing
    timers_init();
    power_management_init();
    ble_stack_init();
    gap_params_init();
    gatt_init();
    services_init();
    advertising_init();
    conn_params_init();
    saadc_init();
    advertising_start();
    gyroscope_accelerometer_init();
    read_bracelet_values();
#if defined (MPU_GET_ACC) || defined (MPU_GET_GYR)
    float accelerations[3] = {0.0f, 0.0f, 0.0f};
    float g_speed[3] = {0.0f, 0.0f, 0.0f};
#endif

#ifdef FSTORAGE_TEST
/* Test bytes for flash */
    //uint32_t m_data = 0xBADC0FFE;
    uint32_t m_data = 0xF1;
    char m_hello_world[] = "hello world";
    uint32_t fstorage_val;
    char fstorage_buff[15];

    rc = nrf_fstorage_write(&fstorage, 0x3e100, &m_data, sizeof(m_data), NULL);
    APP_ERROR_CHECK(rc);
    wait_for_flash_ready(&fstorage);

    //m_data = 0xDEADBEEF;
    m_data = 0x66;
    //rc = nrf_fstorage_write(&fstorage, 0x3e000, &m_data, sizeof(m_data), NULL);
    rc = nrf_fstorage_write(&fstorage, 0x3e104, &m_data, sizeof(m_data), NULL);
    APP_ERROR_CHECK(rc);
    wait_for_flash_ready(&fstorage);

    rc = nrf_fstorage_write(&fstorage, 0x3f000, m_hello_world, sizeof(m_hello_world), NULL);
    APP_ERROR_CHECK(rc);
    wait_for_flash_ready(&fstorage);
#endif

#ifdef SAVING_TEST
    save_bracelet_values(BRACELET_MODE);
    save_bracelet_values(RESISTANCE_VALUES);
    save_bracelet_values(CALIBR_SENSORS_STAGE_1);
    save_bracelet_values(CALIBR_SENSORS_STAGE_2);
    save_bracelet_values(CHOSEN_SIGNALS);

    bracelet_mode = 0;
    chosen_signals = 0;
    memset(resistance, 0, sizeof(resistance));
    memset(signals_stage_1, 0, sizeof(signals_stage_1));
    memset(signals_stage_2, 0, sizeof(signals_stage_2));

    read_bracelet_values();
    char ble_buff[50];
    uint16_t output_len;
#endif

    while (1) {
        if (!nrf_gpio_pin_read(BTN)) nrf_gpio_pin_clear(OUT_MCP);
        //idle_state_handle();

#ifdef ANALOG_IN_GET
        for (uint8_t i = 0; i < 4; i++) {
            nrfx_saadc_sample_convert(i, &signals[i]);
        }

        sprintf((char *) ble_output_array, "%d %d %d %d", signals[0], signals[1], signals[2], signals[3]);
        uint16_t output_arr_len = strlen(ble_output_array);
        ble_nus_data_send(&m_nus, ble_output_array, &output_arr_len, m_conn_handle);
        nrf_delay_ms(500);
#elif defined (MPU_GET_ACC)
        mpu_get_float_data(accelerations, g_speed);
        sprintf((char *) ble_output_array, "%.2f %.2f %.2f", accelerations[0], accelerations[1], accelerations[2]);
        uint16_t output_arr_len = strlen(ble_output_array);
        ble_nus_data_send(&m_nus, ble_output_array, &output_arr_len, m_conn_handle);
        nrf_delay_ms(500);
#elif defined (MPU_GET_GYR)
        mpu_get_float_data(accelerations, g_speed);
        sprintf((char *) ble_output_array, "%.2f %.2f %.2f", g_speed[0], g_speed[1], g_speed[2]);
        uint16_t output_arr_len = strlen(ble_output_array);
        ble_nus_data_send(&m_nus, ble_output_array, &output_arr_len, m_conn_handle);
        nrf_delay_ms(500);
#elif defined (FSTORAGE_TEST)
        /*uint8_t tmp_buf[4];
        nrf_fstorage_read(&fstorage, 0x3e100, &tmp_buf, sizeof(fstorage_val));
        sprintf(fstorage_buff, "%02X %02X %02X %02X", tmp_buf[3], tmp_buf[2], tmp_buf[1], tmp_buf[0]);
        uint16_t output_len = sizeof(fstorage_buff);
        ble_nus_data_send(&m_nus, (uint8_t *) fstorage_buff, &output_len, m_conn_handle);
        nrf_delay_ms(1000);

        nrf_fstorage_read(&fstorage, 0x3e000, &tmp_buf, sizeof(fstorage_val));
        sprintf(fstorage_buff, "%02X %02X %02X %02X", tmp_buf[3], tmp_buf[2], tmp_buf[1], tmp_buf[0]);
        output_len = sizeof(fstorage_buff);
        ble_nus_data_send(&m_nus, (uint8_t *) fstorage_buff, &output_len, m_conn_handle);
        nrf_delay_ms(1000);*/

        //nrf_fstorage_read(&fstorage, 0x3e100, &fstorage_val, sizeof(fstorage_val));
        //sprintf(fstorage_buff, "%X", fstorage_val);
        //uint16_t output_len = sizeof(fstorage_buff);
        //ble_nus_data_send(&m_nus, (uint8_t *) &fstorage_buff, &output_len, m_conn_handle);
        //nrf_delay_ms(2000);
        //nrf_fstorage_read(&fstorage, 0x3e000, &fstorage_val, sizeof(fstorage_val));
        //sprintf(fstorage_buff, "%X", fstorage_val);
        //output_len = sizeof(fstorage_buff);
        //ble_nus_data_send(&m_nus, (uint8_t *) &fstorage_buff, &output_len, m_conn_handle);
        //nrf_delay_ms(2000);
        /*nrf_fstorage_read(&fstorage, 0x3f000, fstorage_buff, sizeof(m_hello_world));
        output_len = sizeof(m_hello_world);
        ble_nus_data_send(&m_nus, (uint8_t *) &fstorage_buff, &output_len, m_conn_handle);
        nrf_delay_ms(1000);*/

        static uint32_t values[3];
        nrf_fstorage_read(&fstorage, 0x3f004, &values[0], 4);
        sprintf(fstorage_buff, "3e100: %X", values[0]);
        uint16_t output_len = strlen(fstorage_buff);
        ble_nus_data_send(&m_nus, (uint8_t *) fstorage_buff, &output_len, m_conn_handle);
        nrf_delay_ms(2000);

        nrf_fstorage_read(&fstorage, 0x3f008, &values[1], 4);
        sprintf(fstorage_buff, "3e101: %X", values[1]);
        output_len = strlen(fstorage_buff);
        ble_nus_data_send(&m_nus, (uint8_t *) fstorage_buff, &output_len, m_conn_handle);
        nrf_delay_ms(2000);

        //nrf_fstorage_read(&fstorage, 0x3e102, &values[2], 1);
        //sprintf(fstorage_buff, "3e102: %02X", values[2]);
        //output_len = strlen(fstorage_buff);
        //ble_nus_data_send(&m_nus, (uint8_t *) fstorage_buff, &output_len, m_conn_handle);
        //nrf_delay_ms(2000);
#elif defined (SAVING_TEST)
    sprintf(ble_buff, "mode: %d", bracelet_mode);
    output_len = strlen(ble_buff);
    ble_nus_data_send(&m_nus, (uint8_t *) ble_buff, &output_len, m_conn_handle);
    nrf_delay_ms(2000);

    sprintf(ble_buff, "R: %d %d %d %d %d %d", resistance[0], resistance[1], resistance[2], resistance[3], resistance[4], resistance[5]);
    output_len = strlen(ble_buff);
    ble_nus_data_send(&m_nus, (uint8_t *) ble_buff, &output_len, m_conn_handle);
    nrf_delay_ms(6000);

    sprintf(ble_buff, "S1: %d %d %d %d %d %d", signals_stage_1[0], signals_stage_1[1], signals_stage_1[2], signals_stage_1[3],
    signals_stage_1[4], signals_stage_1[5]);
    output_len = strlen(ble_buff);
    ble_nus_data_send(&m_nus, (uint8_t *) ble_buff, &output_len, m_conn_handle);
    nrf_delay_ms(6000);

    sprintf(ble_buff, "S2: %d %d %d %d %d %d", signals_stage_2[0], signals_stage_2[1], signals_stage_2[2], signals_stage_2[3],
    signals_stage_2[4], signals_stage_2[5]);
    output_len = strlen(ble_buff);
    ble_nus_data_send(&m_nus, (uint8_t *) ble_buff, &output_len, m_conn_handle);
    nrf_delay_ms(6000);

    sprintf(ble_buff, "CS: %d", chosen_signals);
    output_len = strlen(ble_buff);
    ble_nus_data_send(&m_nus, (uint8_t *) ble_buff, &output_len, m_conn_handle);
    nrf_delay_ms(2000);
#endif
    }
}

/*************************************************************************************************************************/
/**@brief  Function for obtaining the last address on the last page of the on-chip flash that
 *          can be used to write user data.
 */
static uint32_t nrf5_flash_end_addr_get(void) {
    uint32_t const bootloader_addr = BOOTLOADER_ADDRESS;
    uint32_t const page_sz         = NRF_FICR->CODEPAGESIZE;
    uint32_t const code_sz         = NRF_FICR->CODESIZE;

    return (bootloader_addr != 0xFFFFFFFF ?
            bootloader_addr : (code_sz * page_sz));
}

static void fstorage_evt_handler(nrf_fstorage_evt_t * p_evt) {
    if (p_evt->result != NRF_SUCCESS) return;

    switch (p_evt->id) {
        case NRF_FSTORAGE_EVT_WRITE_RESULT:
            break;
        case NRF_FSTORAGE_EVT_ERASE_RESULT:
            break;
        default:
            break;
    }
}

static void wait_for_flash_ready(nrf_fstorage_t const * p_fstorage) {
    /* While fstorage is busy, sleep and wait for an event. */
    while (nrf_fstorage_is_busy(p_fstorage)) {
        //power_manage();
    }
}

void saadc_callback_handler(nrf_drv_saadc_evt_t const *p_event) {}

static void saadc_init(void) {
    ret_code_t err_code;

    nrf_saadc_channel_config_t ch_cfg_0 = NRFX_SAADC_DEFAULT_CHANNEL_CONFIG_SE(NRF_SAADC_INPUT_AIN0); // p0.02
    nrf_saadc_channel_config_t ch_cfg_1 = NRFX_SAADC_DEFAULT_CHANNEL_CONFIG_SE(NRF_SAADC_INPUT_AIN1); // p0.03
    nrf_saadc_channel_config_t ch_cfg_2 = NRFX_SAADC_DEFAULT_CHANNEL_CONFIG_SE(NRF_SAADC_INPUT_AIN2); // p0.04
    nrf_saadc_channel_config_t ch_cfg_3 = NRFX_SAADC_DEFAULT_CHANNEL_CONFIG_SE(NRF_SAADC_INPUT_AIN3); // p0.05

    nrf_drv_saadc_init(NULL, saadc_callback_handler);
    nrfx_saadc_channel_init(0, &ch_cfg_0);
    nrfx_saadc_channel_init(1, &ch_cfg_1);
    nrfx_saadc_channel_init(2, &ch_cfg_2);
    nrfx_saadc_channel_init(3, &ch_cfg_3);
}


/**@brief Function for assert macro callback.
 *
 * @details This function will be called in case of an assert in the SoftDevice.
 *
 * @warning This handler is an example only and does not fit a final product. You need to analyse
 *          how your product is supposed to react in case of Assert.
 * @warning On assert from the SoftDevice, the system can only recover on reset.
 *
 * @param[in] line_num    Line number of the failing ASSERT call.
 * @param[in] p_file_name File name of the failing ASSERT call.
 */
void assert_nrf_callback(uint16_t line_num, const uint8_t * p_file_name) {
    app_error_handler(DEAD_BEEF, line_num, p_file_name);
}

/**@brief Function for initializing the timer module.
 */
static void timers_init(void) {
    ret_code_t err_code = app_timer_init();
    APP_ERROR_CHECK(err_code);
}

/**@brief Function for the GAP initialization.
 *
 * @details This function will set up all the necessary GAP (Generic Access Profile) parameters of
 *          the device. It also sets the permissions and appearance.
 */
static void gap_params_init(void) {
    uint32_t                err_code;
    ble_gap_conn_params_t   gap_conn_params;
    ble_gap_conn_sec_mode_t sec_mode;

    BLE_GAP_CONN_SEC_MODE_SET_OPEN(&sec_mode);

    err_code = sd_ble_gap_device_name_set(&sec_mode,
                                          (const uint8_t *) DEVICE_NAME,
                                          strlen(DEVICE_NAME));
    APP_ERROR_CHECK(err_code);

    memset(&gap_conn_params, 0, sizeof(gap_conn_params));

    gap_conn_params.min_conn_interval = MIN_CONN_INTERVAL;
    gap_conn_params.max_conn_interval = MAX_CONN_INTERVAL;
    gap_conn_params.slave_latency     = SLAVE_LATENCY;
    gap_conn_params.conn_sup_timeout  = CONN_SUP_TIMEOUT;

    err_code = sd_ble_gap_ppcp_set(&gap_conn_params);
    APP_ERROR_CHECK(err_code);
}


/**@brief Function for handling Queued Write Module errors.
 *
 * @details A pointer to this function will be passed to each service which may need to inform the
 *          application about an error.
 *
 * @param[in]   nrf_error   Error code containing information about what went wrong.
 */
static void nrf_qwr_error_handler(uint32_t nrf_error) {
    APP_ERROR_HANDLER(nrf_error);
}


/**@brief Function for handling the data from the Nordic UART Service.
 *
 * @details This function will process the data received from the Nordic UART BLE Service and send
 *          it to the UART module.
 *
 * @param[in] p_evt       Nordic UART Service event.
 */
/**@snippet [Handling the data received over BLE] */
static void nus_data_handler(ble_nus_evt_t * p_evt) {
    if (p_evt->type == BLE_NUS_EVT_RX_DATA){}
}
/**@snippet [Handling the data received over BLE] */


/**@brief Function for initializing services that will be used by the application.
 */
static void services_init(void) {
    uint32_t           err_code;
    ble_nus_init_t     nus_init;
    nrf_ble_qwr_init_t qwr_init = {0};

    // Initialize Queued Write Module.
    qwr_init.error_handler = nrf_qwr_error_handler;

    err_code = nrf_ble_qwr_init(&m_qwr, &qwr_init);
    APP_ERROR_CHECK(err_code);

    // Initialize NUS.
    memset(&nus_init, 0, sizeof(nus_init));

    nus_init.data_handler = nus_data_handler;

    err_code = ble_nus_init(&m_nus, &nus_init);
    APP_ERROR_CHECK(err_code);
}


/**@brief Function for handling an event from the Connection Parameters Module.
 *
 * @details This function will be called for all events in the Connection Parameters Module
 *          which are passed to the application.
 *
 * @note All this function does is to disconnect. This could have been done by simply setting
 *       the disconnect_on_fail config parameter, but instead we use the event handler
 *       mechanism to demonstrate its use.
 *
 * @param[in] p_evt  Event received from the Connection Parameters Module.
 */
static void on_conn_params_evt(ble_conn_params_evt_t * p_evt) {
    uint32_t err_code;

    if (p_evt->evt_type == BLE_CONN_PARAMS_EVT_FAILED) {
        err_code = sd_ble_gap_disconnect(m_conn_handle, BLE_HCI_CONN_INTERVAL_UNACCEPTABLE);
        APP_ERROR_CHECK(err_code);
    }
}


/**@brief Function for handling errors from the Connection Parameters module.
 *
 * @param[in] nrf_error  Error code containing information about what went wrong.
 */
static void conn_params_error_handler(uint32_t nrf_error) {
    APP_ERROR_HANDLER(nrf_error);
}


/**@brief Function for initializing the Connection Parameters module.
 */
static void conn_params_init(void) {
    uint32_t               err_code;
    ble_conn_params_init_t cp_init;

    memset(&cp_init, 0, sizeof(cp_init));

    cp_init.p_conn_params                  = NULL;
    cp_init.first_conn_params_update_delay = FIRST_CONN_PARAMS_UPDATE_DELAY;
    cp_init.next_conn_params_update_delay  = NEXT_CONN_PARAMS_UPDATE_DELAY;
    cp_init.max_conn_params_update_count   = MAX_CONN_PARAMS_UPDATE_COUNT;
    cp_init.start_on_notify_cccd_handle    = BLE_GATT_HANDLE_INVALID;
    cp_init.disconnect_on_fail             = false;
    cp_init.evt_handler                    = on_conn_params_evt;
    cp_init.error_handler                  = conn_params_error_handler;

    err_code = ble_conn_params_init(&cp_init);
    APP_ERROR_CHECK(err_code);
}


/**@brief Function for putting the chip into sleep mode.
 *
 * @note This function will not return.
 */
static void sleep_mode_enter(void) {
    // Go to system-off mode (this function will not return; wakeup will cause a reset).
    uint32_t err_code = sd_power_system_off();
    APP_ERROR_CHECK(err_code);
}


/**@brief Function for handling advertising events.
 *
 * @details This function will be called for advertising events which are passed to the application.
 *
 * @param[in] ble_adv_evt  Advertising event.
 */
static void on_adv_evt(ble_adv_evt_t ble_adv_evt) {
    uint32_t err_code;

    switch (ble_adv_evt) {
        case BLE_ADV_EVT_FAST:
            break;
        case BLE_ADV_EVT_IDLE:
            sleep_mode_enter();
            break;
        default:
            break;
    }
}


/**@brief Function for handling BLE events.
 *
 * @param[in]   p_ble_evt   Bluetooth stack event.
 * @param[in]   p_context   Unused.
 */
static void ble_evt_handler(ble_evt_t const * p_ble_evt, void * p_context) {
    uint32_t err_code;

    switch (p_ble_evt->header.evt_id) {
        case BLE_GAP_EVT_CONNECTED:
            m_conn_handle = p_ble_evt->evt.gap_evt.conn_handle;
            err_code = nrf_ble_qwr_conn_handle_assign(&m_qwr, m_conn_handle);
            APP_ERROR_CHECK(err_code);
            break;
        case BLE_GAP_EVT_DISCONNECTED:
            m_conn_handle = BLE_CONN_HANDLE_INVALID;
            break;
        case BLE_GAP_EVT_PHY_UPDATE_REQUEST:
            {
                ble_gap_phys_t const phys = {
                    .rx_phys = BLE_GAP_PHY_AUTO,
                    .tx_phys = BLE_GAP_PHY_AUTO,
                };
                err_code = sd_ble_gap_phy_update(p_ble_evt->evt.gap_evt.conn_handle, &phys);
                APP_ERROR_CHECK(err_code);
            }
            break;
        case BLE_GAP_EVT_SEC_PARAMS_REQUEST:
            // Pairing not supported
            err_code = sd_ble_gap_sec_params_reply(m_conn_handle, BLE_GAP_SEC_STATUS_PAIRING_NOT_SUPP, NULL, NULL);
            APP_ERROR_CHECK(err_code);
            break;
        case BLE_GATTS_EVT_SYS_ATTR_MISSING:
            // No system attributes have been stored.
            err_code = sd_ble_gatts_sys_attr_set(m_conn_handle, NULL, 0, 0);
            APP_ERROR_CHECK(err_code);
            break;
        case BLE_GATTC_EVT_TIMEOUT:
            // Disconnect on GATT Client timeout event.
            err_code = sd_ble_gap_disconnect(p_ble_evt->evt.gattc_evt.conn_handle,
                                             BLE_HCI_REMOTE_USER_TERMINATED_CONNECTION);
            APP_ERROR_CHECK(err_code);
            break;
        case BLE_GATTS_EVT_TIMEOUT:
            // Disconnect on GATT Server timeout event.
            err_code = sd_ble_gap_disconnect(p_ble_evt->evt.gatts_evt.conn_handle,
                                             BLE_HCI_REMOTE_USER_TERMINATED_CONNECTION);
            APP_ERROR_CHECK(err_code);
            break;
        default:
            // No implementation needed.
            break;
    }
}


/**@brief Function for the SoftDevice initialization.
 *
 * @details This function initializes the SoftDevice and the BLE event interrupt.
 */
static void ble_stack_init(void) {
    ret_code_t err_code;

    err_code = nrf_sdh_enable_request();
    APP_ERROR_CHECK(err_code);

    // Configure the BLE stack using the default settings.
    // Fetch the start address of the application RAM.
    uint32_t ram_start = 0;
    err_code = nrf_sdh_ble_default_cfg_set(APP_BLE_CONN_CFG_TAG, &ram_start);
    APP_ERROR_CHECK(err_code);

    // Enable BLE stack.
    err_code = nrf_sdh_ble_enable(&ram_start);
    APP_ERROR_CHECK(err_code);

    // Register a handler for BLE events.
    NRF_SDH_BLE_OBSERVER(m_ble_observer, APP_BLE_OBSERVER_PRIO, ble_evt_handler, NULL);
}


/**@brief Function for handling events from the GATT library. */
void gatt_evt_handler(nrf_ble_gatt_t * p_gatt, nrf_ble_gatt_evt_t const * p_evt) {
    if ((m_conn_handle == p_evt->conn_handle) && (p_evt->evt_id == NRF_BLE_GATT_EVT_ATT_MTU_UPDATED)) {
        m_ble_nus_max_data_len = p_evt->params.att_mtu_effective - OPCODE_LENGTH - HANDLE_LENGTH;
    }
}


/**@brief Function for initializing the GATT library. */
static void gatt_init(void) {
    ret_code_t err_code;

    err_code = nrf_ble_gatt_init(&m_gatt, gatt_evt_handler);
    APP_ERROR_CHECK(err_code);

    err_code = nrf_ble_gatt_att_mtu_periph_set(&m_gatt, NRF_SDH_BLE_GATT_MAX_MTU_SIZE);
    APP_ERROR_CHECK(err_code);
}


/**@brief Function for initializing the Advertising functionality.
 */
static void advertising_init(void) {
    uint32_t               err_code;
    ble_advertising_init_t init;

    memset(&init, 0, sizeof(init));

    init.advdata.name_type          = BLE_ADVDATA_FULL_NAME;
    init.advdata.include_appearance = false;
    init.advdata.flags              = BLE_GAP_ADV_FLAGS_LE_ONLY_LIMITED_DISC_MODE;

    init.srdata.uuids_complete.uuid_cnt = sizeof(m_adv_uuids) / sizeof(m_adv_uuids[0]);
    init.srdata.uuids_complete.p_uuids  = m_adv_uuids;

    init.config.ble_adv_fast_enabled  = true;
    init.config.ble_adv_fast_interval = APP_ADV_INTERVAL;
    init.config.ble_adv_fast_timeout  = APP_ADV_DURATION;
    init.evt_handler = on_adv_evt;

    err_code = ble_advertising_init(&m_advertising, &init);
    APP_ERROR_CHECK(err_code);

    ble_advertising_conn_cfg_tag_set(&m_advertising, APP_BLE_CONN_CFG_TAG);
}


/**@brief Function for initializing power management.
 */
static void power_management_init(void) {
    ret_code_t err_code;
    err_code = nrf_pwr_mgmt_init();
    APP_ERROR_CHECK(err_code);
}


/**@brief Function for handling the idle state (main loop).
 *
 * @details If there is no pending log operation, then sleep until next the next event occurs.
 */
static void idle_state_handle(void) {
    /*if (NRF_LOG_PROCESS() == false)
    {
        nrf_pwr_mgmt_run();
    }*/
}


/**@brief Function for starting advertising.
 */
static void advertising_start(void) {
    uint32_t err_code = ble_advertising_start(&m_advertising, BLE_ADV_MODE_FAST);
    APP_ERROR_CHECK(err_code);
}

/**@brief Initialization the mpu module
 */
static void gyroscope_accelerometer_init(void) {
    nrf_delay_ms(500); // delay is necessary for mpu initialization
    if (mpu_init(29, 30, 31, 27)) {
        while (1) {
            nrf_gpio_pin_set(LED_1);
            nrf_delay_ms(200);
            nrf_gpio_pin_clear(LED_1);
            nrf_delay_ms(200);
        }
    }
}

/**@brief Initialization of digital outputs & inputs
 */
static void digital_pins_init(void) {
    nrf_gpio_cfg_output(OUT_MCP);
    nrf_gpio_pin_set(OUT_MCP);
 
    nrf_gpio_cfg_output(LED_1);
    nrf_gpio_cfg_output(LED_2);
    nrf_gpio_cfg_output(V_S_S);
    nrf_gpio_cfg_output(AD5206_CS);
    nrf_gpio_pin_set(AD5206_CS);

    nrf_gpio_cfg_input(MC_DIN, NRF_GPIO_PIN_NOPULL);
    nrf_gpio_cfg_input(BTN, NRF_GPIO_PIN_NOPULL);
    nrf_gpio_cfg_input(CHRG, NRF_GPIO_PIN_NOPULL);

    nrf_gpio_pin_set(LED_2);
    /* necessary stuff, without that bracelet turnes off after shutdowning and launching!! */
    while (!nrf_gpio_pin_read(MC_DIN));
}

/**@brief Function for writitng resistance value to the certain AD5206 channel
 * @param[in]   address   address of the channel [0-5]
 * @param[in]   value     numeric value of the resistance [0-255]
 */
static void ad5206_write(uint8_t address, uint8_t value) {
    if ((value <= 255) && (value >= 0) && (address < 6)) {
        nrf_gpio_pin_clear(AD5206_CS);
        nrf_delay_ms(50);
        nrf_drv_spi_transfer(&spi_inst, &address, 1, NULL, 0);
        nrf_delay_ms(10);
        switch (address) {
            case 2:
            case 3:
            case 4:
                value = 255 - value;
                break;
        }
        nrf_drv_spi_transfer(&spi_inst, &value, 1, NULL, 0);
        nrf_delay_ms(10);
        nrf_gpio_pin_set(AD5206_CS);
    }
}

/**@brief Function for saving important values with help of fstorage
 * @param[in]   save_case   value that define the case of saving
 */
static void save_bracelet_values(uint8_t save_case) {
    ret_code_t rc;

    switch (save_case) {
        case BRACELET_MODE: {
                uint32_t tmp = bracelet_mode;
                rc = nrf_fstorage_write(&fstorage, 0x3f000, &tmp, sizeof(tmp), NULL);
                APP_ERROR_CHECK(rc);
            }
            break;
        case RESISTANCE_VALUES: {
                uint32_t tmp = (uint32_t)resistance[0] | ((uint32_t)resistance[1] << 8) | ((uint32_t)resistance[2] << 16) | ((uint32_t)resistance[3] << 24);
                rc = nrf_fstorage_write(&fstorage, 0x3f004, &tmp, sizeof(tmp), NULL);
                APP_ERROR_CHECK(rc);
                nrf_delay_ms(50);

                tmp = 0;
                tmp = (uint32_t)resistance[4] | ((uint32_t)resistance[5] << 8);
                rc = nrf_fstorage_write(&fstorage, 0x3f008, &tmp, sizeof(tmp), NULL);
                APP_ERROR_CHECK(rc);
            }
            break;
        case CALIBR_SENSORS_STAGE_1: {
                uint32_t tmp;
                uint32_t tmp_addr = 0x3f00C;
                for (uint8_t i = 0; i < 6; i += 2) {
                    tmp = signals_stage_1[i] | ((uint32_t)signals_stage_1[i + 1] << 16);
                    rc = nrf_fstorage_write(&fstorage, tmp_addr, &tmp, sizeof(tmp), NULL);
                    APP_ERROR_CHECK(rc);
                    tmp_addr += 4;
                    nrf_delay_ms(50);
                }
            }
            break;
        case CALIBR_SENSORS_STAGE_2: {
                uint32_t tmp;
                uint32_t tmp_addr = 0x3f018;
                for (uint8_t i = 0; i < 6; i += 2) {
                    tmp = signals_stage_2[i] | ((uint32_t)signals_stage_2[i + 1] << 16);
                    rc = nrf_fstorage_write(&fstorage, tmp_addr, &tmp, sizeof(tmp), NULL);
                    APP_ERROR_CHECK(rc);
                    tmp_addr += 4;
                    nrf_delay_ms(50);
                }
            }
            break;
        case CHOSEN_SIGNALS: {
                uint32_t tmp = chosen_signals;
                rc = nrf_fstorage_write(&fstorage, 0x3f024, &tmp, sizeof(tmp), NULL);
                APP_ERROR_CHECK(rc);
            }
            break;
    }
    nrf_delay_ms(50);
}

/**@brief Function for reading important values with help of fstorage
 */
static void read_bracelet_values(void) {
    ret_code_t rc;
    uint32_t tmp = 0;
     
    /* get the bracelet mode value */
    rc = nrf_fstorage_read(&fstorage, 0x3f000, &tmp, sizeof(tmp));
    APP_ERROR_CHECK(rc);
    bracelet_mode = tmp;

    /* get the resistance values */
    tmp = 0;
    rc = nrf_fstorage_read(&fstorage, 0x3f004, &tmp, sizeof(tmp));
    APP_ERROR_CHECK(rc);
    resistance[0] = tmp;
    resistance[1] = tmp >> 8;
    resistance[2] = tmp >> 16;
    resistance[3] = tmp >> 24;
    tmp = 0;
    rc = nrf_fstorage_read(&fstorage, 0x3f008, &tmp, sizeof(tmp));
    APP_ERROR_CHECK(rc);
    resistance[4] = tmp;
    resistance[5] = tmp >> 8;
    
    /* get the calibration values */
    tmp = 0;
    uint32_t tmp_addr_stage_1 = 0x3f00C;
    uint32_t tmp_addr_stage_2 = 0x3f018;
    for (uint8_t i = 0; i < 6; i += 2) {
        nrf_fstorage_read(&fstorage, tmp_addr_stage_1, &tmp, sizeof(tmp));
        tmp_addr_stage_1 += 4;
        signals_stage_1[i] = tmp;
        signals_stage_1[i + 1] = tmp >> 16;
        
        tmp = 0;
        nrf_fstorage_read(&fstorage, tmp_addr_stage_2, &tmp, sizeof(tmp));
        tmp_addr_stage_2 += 4;
        signals_stage_2[i] = tmp;
        signals_stage_2[i + 1] = tmp >> 16;
    }

    /* get the chosen signals value */    
    tmp = 0;
    rc = nrf_fstorage_read(&fstorage, 0x3f024, &tmp, sizeof(tmp));
    APP_ERROR_CHECK(rc);
    chosen_signals = tmp;
}
